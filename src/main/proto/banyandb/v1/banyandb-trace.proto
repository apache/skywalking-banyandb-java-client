// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package banyandb.trace.v1;

import "banyandb/v1/banyandb-common.proto";
import "banyandb/v1/banyandb-model.proto";
import "google/api/annotations.proto";

option go_package = "github.com/apache/skywalking-banyandb/api/proto/banyandb/trace/v1";
option java_package = "org.apache.skywalking.banyandb.trace.v1";

// Write messages
message WriteRequest {
  common.v1.Metadata metadata = 1;
  repeated model.v1.TagValue tags = 2;
  bytes span = 3;
  uint64 version = 4;
}

message WriteResponse {
  common.v1.Metadata metadata = 1;
  uint64 version = 2;
  string status = 3;
}

message InternalWriteRequest {
  uint32 shard_id = 1;
  WriteRequest request = 2;
}

// Query messages
message Span {
  repeated model.v1.Tag tags = 1;
  bytes span = 2;
}

message QueryResponse {
  repeated Span spans = 1;
  common.v1.Trace trace_query_result = 2;
}

message QueryRequest {
  repeated string groups = 1;
  string name = 2;
  model.v1.TimeRange time_range = 3;
  uint32 offset = 4;
  uint32 limit = 5;
  model.v1.QueryOrder order_by = 6;
  model.v1.Criteria criteria = 7;
  repeated string tag_projection = 8;
  bool trace = 9;
  repeated string stages = 10;
}

// RPC service
service TraceService {
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/v1/trace/data"
      body: "*"
    };
  }

  rpc Write(stream WriteRequest) returns (stream WriteResponse);
}